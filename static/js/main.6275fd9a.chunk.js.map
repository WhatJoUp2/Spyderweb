{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Allegiances","db","require","App","useState","length","Math","random","round","value","setValue","ref","useRef","parseName","poi","name","alias","moveCursorToEnd","current","focus","autoFocus","spellCheck","className","onKeyDown","ev","newChar","key","console","log","command","commandName","slice","split","toLowerCase","commandArg","find","p","allegiance","threatClass","organization","appearance","personality","powers","achievements","filter","HERO","sort","a","b","reduce","ret","VILLAIN","NEUTRAL","handleCommand","pop","currentTarget","endsWith","stopPropagation","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6275fd9a.chunk.js","sourcesContent":["import { useRef, useState } from \"react\";\nimport \"./App.css\";\n\nconst db: PoI[] = require(\"./db.json\");\n\nenum Allegiances {\n    HERO = \"Hero\",\n    VILLAIN = \"Villain\",\n    NEUTRAL = \"Neutral\",\n}\n\ninterface PoI {\n    name?: string;\n    alias?: string;\n    allegiance: Allegiances;\n    threatClass: string;\n    organization: string;\n    appearance: string;\n    personality: string;\n    powers: string;\n    achievements: string;\n}\n\nfunction App() {\n    const [value, setValue] = useState(\n        `Hello! Welcome to the Spyderweb! Currently we have [${db.length}] People of Interest (PoI) in our database. What is your query?` +\n            `${\n                Math.random() * 100 < 5 ? `\\nWARNING: Found ${Math.round(Math.random() * 19000 + 1000)} rule 34 drawings of ALLyss, recomended purging.` : \"\"\n            }\\n> `\n    );\n    const ref = useRef<HTMLTextAreaElement | null>(null);\n\n    const parseName = (poi: PoI) => {\n        if (poi.name && poi.alias) return `${poi.alias} (${poi.name})`;\n        return (poi.name ? poi.name : poi.alias) || \"\";\n    };\n\n    const handleCommand = (command: string) => {\n        if (command.length === 2) {\n            setValue(value + \"\\n> \");\n            return;\n        }\n        const commandName = command.slice(2).split(\" \")[0].toLowerCase();\n        const commandArg = command.slice(3 + commandName.length);\n\n        switch (commandName) {\n            case \"info\":\n                const poi = db.find((p): boolean => {\n                    if (p.name && p.name.toLowerCase() === commandArg.toLowerCase()) return true;\n                    if (p.alias && p.alias.toLowerCase() === commandArg.toLowerCase()) return true;\n                    return false;\n                });\n                if (poi)\n                    setValue(\n                        value +\n                            `\\n\\nName: ${poi.name || \"Unknown\"}` +\n                            `\\nAlias: ${poi.alias || \"N/A\"}` +\n                            `\\nAllegiance: ${poi.allegiance}` +\n                            `\\nThreat Class: ${poi.threatClass}` +\n                            `\\nOrganization: ${poi.organization}` +\n                            `\\n\\nAppearance: ${poi.appearance}` +\n                            `\\n\\nPersonality: ${poi.personality}` +\n                            `\\n\\nPowers: ${poi.powers}` +\n                            `\\n\\nAchievements: ${poi.achievements}\\n\\n> `\n                    );\n                else setValue(value + \"\\n\\n\" + commandArg + \" not found on the database.\\n\\n> \");\n                break;\n            case \"list\":\n                setValue(\n                    value +\n                        db\n                            .filter((poi) => poi.allegiance === Allegiances.HERO)\n                            .sort((a, b) => (parseName(a) > parseName(b) ? 1 : -1))\n                            .reduce<string>((ret, poi) => `${ret} |${parseName(poi)}\\n`, \"\\n\\nHeroes\\n\") +\n                        db\n                            .filter((poi) => poi.allegiance === Allegiances.VILLAIN)\n                            .sort((a, b) => (parseName(a) > parseName(b) ? 1 : -1))\n                            .reduce<string>((ret, poi) => `${ret} |${parseName(poi)}\\n`, \"\\nVillains\\n\") +\n                        db\n                            .filter((poi) => poi.allegiance === Allegiances.NEUTRAL)\n                            .sort((a, b) => (parseName(a) > parseName(b) ? 1 : -1))\n                            .reduce<string>((ret, poi) => `${ret} |${parseName(poi)}\\n`, \"\\nNeutrals\\n\") +\n                        \"\\n> \"\n                );\n                break;\n            case \"help\":\n                setValue(\n                    value + \"\\n\\nclear - Cleans the terminal.\\ninfo [PoI name] - Prints info of the PoI.\\nlist - Shows a list of the PoI in the database\\n\\n> \"\n                );\n                break;\n            case \"clear\":\n                setValue(\"> \");\n                break;\n            default:\n                setValue(value + \"\\nError! Command not recognized, please type 'help'.\\n> \");\n        }\n    };\n\n    const handleChangeCapture = (ev: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        moveCursorToEnd();\n        const newChar = ev.key; //ev.currentTarget.value.slice(-1);\n        console.log(newChar);\n        switch (newChar) {\n            //if enter was pressed\n            case \"Enter\":\n                handleCommand(value.split(\"\\n\").pop() || \"\");\n                break;\n            case \"Backspace\":\n                if (ev.currentTarget.value.endsWith(\"\\n> \")) break;\n                else setValue(value.slice(0, -1));\n                break;\n            case \" \":\n                if (!value.endsWith(\"\\n> \")) setValue(value + \" \");\n                break;\n            //writes whatever\n            default:\n                if (newChar.length === 1) setValue(value + newChar);\n                else ev.stopPropagation();\n        }\n    };\n\n    const moveCursorToEnd = () => {\n        if (ref) ref.current?.focus();\n    };\n\n    return (\n        <textarea ref={ref} autoFocus spellCheck={false} className='console' value={value} onKeyDown={handleChangeCapture} onClick={moveCursorToEnd}></textarea>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}