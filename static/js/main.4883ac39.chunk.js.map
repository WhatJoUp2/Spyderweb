{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","db","length","value","setValue","ref","useRef","moveCursorToEnd","current","focus","autoFocus","spellCheck","className","onChangeCapture","ev","currentTarget","endsWith","slice","newChar","console","log","command","commandName","split","commandArg","villain","find","name","toLowerCase","allegiance","threatClass","organization","appearance","personality","powers","achievements","reduce","ret","handleCommand","pop","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"svYA6FeA,MAzFf,WAAgB,IAAD,EACeC,mBAAS,uDAAD,OACyBC,EAAGC,OAD5B,yEADvB,mBACJC,EADI,KACGC,EADH,KAILC,EAAMC,iBAAmC,MAoEzCC,EAAkB,WAAO,IAAD,EACtBF,IAAK,UAAAA,EAAIG,eAAJ,SAAaC,UAG1B,OACI,0BACIJ,IAAKA,EACLK,WAAS,EACTC,YAAY,EACZC,UAAU,UACVT,MAAOA,EACPU,gBAnCoB,SAACC,GAGzB,GAFAP,IAEIO,EAAGC,cAAcZ,MAAMD,OAASC,EAAMD,OAA1C,CAEI,GAAIY,EAAGC,cAAcZ,MAAMa,SAAS,OAAQ,OACvCZ,EAASD,EAAMc,MAAM,GAAI,SAIlC,IAAIH,EAAGC,cAAcZ,MAAMa,SAAS,SAApC,CACA,IAAME,EAAUJ,EAAGC,cAAcZ,MAAMc,OAAO,GAE9C,OADAE,QAAQC,IAAIF,GACJA,GAEJ,IAAK,MAzDS,SAACG,GACnB,GAAuB,IAAnBA,EAAQnB,OAAZ,CAIA,IAAMoB,EAAcD,EAAQJ,MAAM,GAAGM,MAAM,KAAK,GAC1CC,EAAaH,EAAQJ,MAAM,EAAIK,EAAYpB,QAEjD,OAAQoB,GACJ,IAAK,OACD,IAAMG,EAAUxB,EAAGyB,MAAK,SAACD,GAAD,OAAaA,EAAQE,KAAKC,gBAAkBJ,EAAWI,iBAE3ExB,EADAqB,EAEItB,EAAK,kBACUsB,EAAQE,MADvB,wBAEqBF,EAAQI,YAF7B,0BAGuBJ,EAAQK,aAH/B,0BAIuBL,EAAQM,cAJ/B,0BAKuBN,EAAQO,YAL/B,2BAMwBP,EAAQQ,aANhC,sBAOmBR,EAAQS,QAP3B,4BAQyBT,EAAQU,aARjC,QAUMhC,EAAQ,KAAOqB,EAAa,6BAC1C,MACJ,IAAK,OACDpB,EAASD,EAAQ,KAAOF,EAAGmC,QAAe,SAACC,EAAKZ,GAAN,OAAkBY,EAAMZ,EAAQE,KAAO,OAAM,IAAM,MAC7F,MACJ,IAAK,OACDvB,EACID,EACI,8IAER,MACJ,IAAK,QACDC,EAAS,MACT,MACJ,QACIA,EAASD,EAAQ,kEApCrBC,EAASD,EAAQ,QAwDbmC,CAAcnC,EAAMoB,MAAM,MAAMgB,OAAS,IACzC,MAEJ,QACInC,EAASD,EAAQe,MAgBrBsB,QAASjC,KC1ENkC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4883ac39.chunk.js","sourcesContent":["import { useRef, useState } from \"react\";\nimport \"./App.css\";\nimport db from \"./db.json\";\n\nfunction App() {\n    const [value, setValue] = useState(\n        `Hello! Welcome to the Spyderweb! Currently we have [${db.length}] People of Interest (PoI) in our database. What is your querry?\\n> `\n    );\n    const ref = useRef<HTMLTextAreaElement | null>(null);\n\n    const handleCommand = (command: string) => {\n        if (command.length === 2) {\n            setValue(value + \"\\n> \");\n            return;\n        }\n        const commandName = command.slice(2).split(\" \")[0];\n        const commandArg = command.slice(3 + commandName.length);\n\n        switch (commandName) {\n            case \"info\":\n                const villain = db.find((villain) => villain.name.toLowerCase() === commandArg.toLowerCase());\n                if (villain)\n                    setValue(\n                        value +\n                            `\\nName: ${villain.name}` +\n                            `\\nAllegiance: ${villain.allegiance}` +\n                            `\\nThreat Class: ${villain.threatClass}` +\n                            `\\nOrganization: ${villain.organization}` +\n                            `\\n\\nAppearance: ${villain.appearance}` +\n                            `\\n\\nPersonality: ${villain.personality}` +\n                            `\\n\\nPowers: ${villain.powers}` +\n                            `\\n\\nAchievements: ${villain.achievements}\\n> `\n                    );\n                else setValue(value + \"\\n\" + commandArg + \"not found on the database\");\n                break;\n            case \"list\":\n                setValue(value + \"\\n\" + db.reduce<string>((ret, villain) => ret + villain.name + \"\\n\", \"\") + \"> \");\n                break;\n            case \"help\":\n                setValue(\n                    value +\n                        \"\\nclear - Cleans the terminal.\\ninfo [villain name] - Prints info of the villain.\\nlist - Shows a list of the villains in the database\\n> \"\n                );\n                break;\n            case \"clear\":\n                setValue(\"> \");\n                break;\n            default:\n                setValue(value + \"\\nError! Command not recognized, please type 'help'.\\n> \");\n        }\n    };\n\n    const handleChangeCapture = (ev: React.FormEvent<HTMLTextAreaElement>) => {\n        moveCursorToEnd();\n        //Erase\n        if (ev.currentTarget.value.length < value.length) {\n            //if begining of the line, doesn't go back\n            if (ev.currentTarget.value.endsWith(\"\\n>\")) return;\n            else setValue(value.slice(0, -1));\n            return;\n        }\n        //prevent fucking up commands with spaces\n        if (ev.currentTarget.value.endsWith(\"\\n>  \")) return;\n        const newChar = ev.currentTarget.value.slice(-1);\n        console.log(newChar);\n        switch (newChar) {\n            //if enter was pressed\n            case \"\\n\":\n                handleCommand(value.split(\"\\n\").pop() || \"\");\n                break;\n            //writes whatever\n            default:\n                setValue(value + newChar);\n        }\n    };\n\n    const moveCursorToEnd = () => {\n        if (ref) ref.current?.focus();\n    };\n\n    return (\n        <textarea\n            ref={ref}\n            autoFocus\n            spellCheck={false}\n            className='console'\n            value={value}\n            onChangeCapture={handleChangeCapture}\n            onClick={moveCursorToEnd}\n        ></textarea>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}